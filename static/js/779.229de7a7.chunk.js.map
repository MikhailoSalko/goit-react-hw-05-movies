{"version":3,"file":"static/js/779.229de7a7.chunk.js","mappings":"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","sources":["api/fetchFunctions.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","js/Notiflix.init.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const URLS = {\n  TREND_FILMS: 'https://api.themoviedb.org/3/trending/movie/week',\n  FILM_BY_SEARCH: 'https://api.themoviedb.org/3/search/movie',\n  FILM_BY_ID: 'https://api.themoviedb.org/3/movie/',\n};\n\nconst OPTIONS = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2NjAwOTdiYTdkMGEwMjdhMWIwZmQ1MzE4ZDEwOWQyNiIsInN1YiI6IjY0NzMyNjgzOWFlNjEzMDBlNTk0ODMwMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ZZFB21DrPYslGFOp2UJX2KSQ02EhM3eeP3-goKJHXAk',\n  },\n};\n\nexport const fetchTrendFims = () => {\n  return fetch(`${URLS.TREND_FILMS}`, OPTIONS).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    //     console.log(response);\n    return response.json();\n  });\n};\n\nexport const fetchFilmsBySearchQuery = search => {\n  return fetch(`${URLS.FILM_BY_SEARCH}?query=${search}`, OPTIONS).then(\n    response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n      //     console.log(response);\n      return response.json();\n    }\n  );\n};\n\nexport const fetchFilmById = id => {\n  return fetch(`${URLS.FILM_BY_ID}${id}`, OPTIONS).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    // console.log(response);\n    return response.json();\n  });\n};\n\nexport const fetchCastByFilmId = id => {\n  return fetch(`${URLS.FILM_BY_ID}${id}/credits`, OPTIONS).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    // console.log(response);\n    return response.json();\n  });\n};\n\nexport const fetchReviewsByFilmId = id => {\n  return fetch(`${URLS.FILM_BY_ID}${id}/reviews`, OPTIONS).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    // console.log(response);\n    return response.json();\n  });\n};\n","import styled from 'styled-components';\n\nexport const StyledReviewsList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  align-items: baseline;\n`;\n\nexport const StyledReviewItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const StyledReviewContainer = styled.div`\n  width: 300px;\n`;\n\nexport const StyledReviewAuthorName = styled.h1`\n  font-size: 30px;\n  margin-bottom: 20px;\n`;\n\nexport const StyledReviewPost = styled.p`\n  font-size: 16px;\n`;\n","import { useEffect, useState } from 'react';\nimport { fetchReviewsByFilmId } from 'api/fetchFunctions';\nimport { useParams } from 'react-router-dom';\nimport { Report } from 'notiflix';\nimport { notiflixSettings } from 'js/Notiflix.init';\nimport { LoaderTailSpin } from 'components/Loader/Loader';\nimport {\n  StyledReviewAuthorName,\n  StyledReviewContainer,\n  StyledReviewItem,\n  StyledReviewPost,\n  StyledReviewsList,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () =>\n      fetchReviewsByFilmId(movieId).then(({ results }) => {\n        return setReviews([...results]);\n      });\n    setLoading(true);\n    getCast()\n      .catch(error => setError(error.message))\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  // console.log(reviews);\n  return (\n    <>\n      {error &&\n        Report.failure(\n          'Something went wrong, please try again later',\n          notiflixSettings\n        )}\n      {loading ? (\n        <LoaderTailSpin />\n      ) : (\n        <StyledReviewsList>\n          {reviews.length === 0 ? (\n            <p>There are no any reviews for this movie</p>\n          ) : (\n            reviews.map(({ id, author, content }) => (\n              <StyledReviewItem key={id}>\n                <StyledReviewContainer>\n                  <StyledReviewAuthorName>\n                    Author: {author}\n                  </StyledReviewAuthorName>\n                  <StyledReviewPost>{content}</StyledReviewPost>\n                </StyledReviewContainer>\n              </StyledReviewItem>\n            ))\n          )}\n        </StyledReviewsList>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import Notiflix from 'notiflix';\n\nexport const notiflixSettings = Notiflix.Report.init({\n  width: '400px',\n  titleFontSize: '16px',\n  titleMaxLength: 50,\n});\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["URLS","OPTIONS","headers","accept","Authorization","fetchTrendFims","fetch","then","response","ok","Error","status","json","fetchFilmsBySearchQuery","search","fetchFilmById","id","fetchCastByFilmId","fetchReviewsByFilmId","StyledReviewsList","styled","StyledReviewItem","StyledReviewContainer","StyledReviewAuthorName","StyledReviewPost","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","getCast","results","catch","message","finally","Report","notiflixSettings","Loader","length","map","author","content","Notiflix","width","titleFontSize","titleMaxLength","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}